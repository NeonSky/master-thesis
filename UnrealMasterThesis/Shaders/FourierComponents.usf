#include "/Engine/Public/Platform.ush"
#include "Common.ush"

float t; // Time (in seconds)

Texture2D<float4> tilde_h0_k;
Texture2D<float4> tilde_h0_neg_k;

RWTexture2D<float4> tilde_hkt_dy;
RWTexture2D<float4> tilde_hkt_dxz;

[numthreads(8, 8, 1)]
void MainCompute(uint3 id : SV_DispatchThreadID) {

  // Horizontal position
  float2 x = float2(id.xy) - float(N) / 2.0;

  // Wave vector
  float2 k_vec = float2(
    2.0 * PI * x.x / L,
    2.0 * PI * x.y / L
  );

  // Wave number
  float k = length(k_vec);
  k = max(k, 0.00001);

  float w = sqrt(GRAVITY * k);

  // See the report for the reason behind the division by 2.

  float2 tilde_h0_ks = tilde_h0_k[id.xy].rg;
  Complex fourier_comp = newComplex(tilde_h0_ks.x / 2.0, tilde_h0_ks.y / 2.0);

  float2 tilde_h0_neg_ks = tilde_h0_neg_k[id.xy].rg;
  Complex fourier_comp_conj = newComplex(tilde_h0_neg_ks.x / 2.0, tilde_h0_neg_ks.y / 2.0);

  float cos_w_t = cos(w * t);
  float sin_w_t = sin(w * t);

  Complex exp_iwt = newComplex(cos_w_t, sin_w_t);
  Complex exp_iwt_inv = newComplex(cos_w_t, -sin_w_t);

  // Tessendorf Equation 43
  Complex hkt_dy = add(
    mul(fourier_comp, exp_iwt),
    mul(fourier_comp_conj, exp_iwt_inv)
  );

  Complex hkt_dx = mul(
    newComplex(0.0, -k_vec.x / k),
    hkt_dy
  );

  Complex hkt_dz = mul(
    newComplex(0.0, -k_vec.y / k),
    hkt_dy
  );

  Complex hkt_dxz = add(
    hkt_dx,
    mul(
      newComplex(0.0, 1.0),
      hkt_dz
    )
  );

  tilde_hkt_dy[id.xy]  = float4(hkt_dy.re, hkt_dy.im, 0.0, 1.0);
  tilde_hkt_dxz[id.xy] = float4(hkt_dxz.re, hkt_dxz.im, 0.0, 1.0);

}