#include "/Engine/Public/Platform.ush"

#include "Common.ush"

#define ENABLE_COLLISIONS

float SpeedInput;
float2 VelocityInput;

Texture2D<float4> ElevationTexture;
StructuredBuffer<SubmergedTriangle> SubmergedTrianglesBuffer;

RWTexture2D<float4> BoatTexture;

// See ElevationSampler.usf
Texture2D<float4> OtherBoatTextures_0;

RWTexture2D<float4> ReadbackTexture;


Rigidbody get_rigidbody() {
    Rigidbody rigidbody;

    rigidbody.force  = float3(0.0, 0.0, 0.0);
    rigidbody.torque = float3(0.0, 0.0, 0.0);

    rigidbody.position    = BoatTexture[uint2(0,0)].rgb; // RGB of (0,0) stores position
    rigidbody.orientation = BoatTexture[uint2(1,0)]; // RGBA of (1,0) stores orientation

    rigidbody.linear_velocity  = BoatTexture[uint2(2,0)].rgb; // RGB of (2,0) stores linear velocity
    rigidbody.angular_velocity = BoatTexture[uint2(3,0)].rgb; // RGB of (3,0) stores angular velocity

    rigidbody.mass              = 2000.0;
    rigidbody.moment_of_inertia = 100.0 * rigidbody.mass;

    return rigidbody;
}

void apply_gravity(inout Rigidbody rigidbody) {
    float3 gravity_force = float3(0.0, 0.0, -GRAVITY * rigidbody.mass);
    add_force_at_position(rigidbody, gravity_force, rigidbody.position);
}

void apply_buoyancy(inout Rigidbody rigidbody) {

    for (int i = 0; i < N_TRIANGLES; i++) {
        SubmergedTriangle t = SubmergedTrianglesBuffer[i];

        float3 normal = t.normal_and_height.xyz;
        float height  = t.normal_and_height.w;
        float3 center = t.center_and_area.xyz;
        float area    = t.center_and_area.w;

        // Ignore non-positive areas
        if (area > 0.0) {

            float3 buoyancy_force = DENSITY_OF_WATER * GRAVITY * height * area * normal;
            buoyancy_force = float3(0.0, 0.0, abs(buoyancy_force.z));

            float buoyancy_torque_amplifier = 20.0;
            float3 amplified_center = buoyancy_torque_amplifier * (center - rigidbody.position) + rigidbody.position;
            add_force_at_position(rigidbody, buoyancy_force, amplified_center);
        }
    }

}

void apply_user_input(inout Rigidbody rigidbody, float r_s) {

    float3 forward = rotate_vector_by_quat(float3(1.0, 0.0, 0.0), rigidbody.orientation);
    float3 right   = rotate_vector_by_quat(float3(0.0, 1.0, 0.0), rigidbody.orientation);
    float3 up      = rotate_vector_by_quat(float3(0.0, 0.0, 1.0), rigidbody.orientation);

    if (VelocityInput.y > 0.0) {
        float3 engine_pos = (-forward) * 2.1 + (-up) * 0.3;
        engine_pos += rigidbody.position;

        float engine_power = HORSEPOWER_TO_NEWTON * SpeedInput * sqrt(r_s);

        add_force_at_position(rigidbody, engine_power * VelocityInput.y * forward, engine_pos);
    }

    if (VelocityInput.x != 0.0) {
        float3 steer_pos = rigidbody.position + 100.0 * forward;
        float engine_power = HORSEPOWER_TO_NEWTON * sqrt(SpeedInput) * sqrt(r_s); // Nerf sideways movement

        add_force_at_position(rigidbody, engine_power * VelocityInput.x * right, steer_pos);
    }
}

void apply_resistance_forces(inout Rigidbody rigidbody, float r_s, float prev_r_s) {

    const float c_damp = 500.0;
    const float angular_drag = 0.1;

    // // Linear damping of linear velocity
    add_force_at_position(rigidbody, -c_damp * r_s * rigidbody.linear_velocity, rigidbody.position);

    // Quadratic damping of linear velocity
    add_force_at_position(rigidbody, -c_damp * r_s * rigidbody.linear_velocity * length(rigidbody.linear_velocity), rigidbody.position);

    // Damping of angular velocity
    rigidbody.angular_velocity -= angular_drag * rigidbody.angular_velocity * (1.0 - r_s);

    // Vertical damping to simulate viscosity and slamming (resistance) forces
    float submersion_change = abs(r_s - prev_r_s);

    float3 stopping_force = -rigidbody.mass * rigidbody.linear_velocity / DELTA_T;
    float3 vdamp_force = stopping_force * submersion_change;

    add_force_at_position(rigidbody, float3(0.0, 0.0, vdamp_force.z), rigidbody.position);
}

void apply_collisions(inout Rigidbody rigidbody) {

    // Approximate each boat's collision box as a capsule (i.e. a cyllinder with a sphere at each end)
    const float SPHERE_RADIUS    = 1.0;
    const float HALF_CYLLINDER_LENGTH = 5.0 / 2.0;

    float3 forward = rotate_vector_by_quat(float3(1.0, 0.0, 0.0), rigidbody.orientation);

    // Sphere centers
    float3 s1 = rigidbody.position + forward * HALF_CYLLINDER_LENGTH;
    float3 s2 = rigidbody.position - forward * HALF_CYLLINDER_LENGTH;

    // See ElevationSampler.usf
    #if BOAT_COUNT > 1
        float3 pos = OtherBoatTextures_0[uint2(0,0)].rgb;
        float4 rot = OtherBoatTextures_0[uint2(1,0)];

        float3 other_forward = rotate_vector_by_quat(float3(1.0, 0.0, 0.0), rot);

        float3 other_s1 = pos + other_forward * HALF_CYLLINDER_LENGTH;
        float3 other_s2 = pos - other_forward * HALF_CYLLINDER_LENGTH;

        // float len = length(rigidbody.position - pos);

        // if (0.05 < len && len < 2.0 * RADIUS) {
        //     float3 dir = normalize(rigidbody.position - pos);
        //     add_force_at_position(rigidbody, 100.0 * rigidbody.mass * dir, rigidbody.position);
        // }

        // TODO: cyllinder-cyllinder instersection (extract to function)
        {
            // The two cyllinders span their own axis:
            //   p1 + t * d1
            //   p2 + t * d2
            //
            // Let:
            //   A = (p1 + t1 * d1) denote the closest point on the first axis.
            //   B = (p2 + t2 * d2) denote the closest point on the second axis.
            //
            // These are the two points we seek.
            //
            // The shortest line segment should then go between these points.
            // That is: C = A + t3 * norm(B - A) = A + t3 * d3
            //
            // For this line segment to be the shortest, it needs to be perpendicular to the two axes.
            // Thus: d3 = cross(d1, d2), where the sign does not matter for our purposes.
            //
            // By definition, the axis of C intersects A.
            // To ensure it also intersects B, we have: C = B
            // That is,
            //   (p1 + t1 * d1) + t3 * d3 = p2 + t2 * d2
            //   <=> p1 - p2 = t2 * d2 - t1 * d1 - t3 * d3
            //
            // Consequently,
            //    dot(d1, p1 - p2) = dot(d1, t2 * d2 - t1 * d1 - t3 * d3)
            //                     = dot(d1, - t1 * d1)
            //                     = -t1
            //
            //    dot(d2, p1 - p2) = dot(d2, t2 * d2 - t1 * d1 - t3 * d3)
            //                     = dot(d2, t2 * d2)
            //                     = t2

            float3 p1 = rigidbody.position;
            float3 d1 = forward;

            float3 p2 = pos;
            float3 d2 = other_forward;

            float t1 = -dot(d1, p1 - p2);
            float t2 = dot(d2, p1 - p2);

            if (abs(t1) > HALF_CYLLINDER_LENGTH || abs(t2) > HALF_CYLLINDER_LENGTH) {
                return;
            }

            float3 A = p1 + t1 * d1;
            float3 B = p2 + t2 * d2;

            float len = length(A - B);

            if (0.05 < len && len < 2.0 * SPHERE_RADIUS) {
                float3 dir = normalize(rigidbody.position - pos);
                add_force_at_position(rigidbody, 100.0 * rigidbody.mass * dir, A);
            }
        }
    #endif
}

float compute_ratio_of_submerge() {
    float tot_area = 27.045519; // manually copied from CPU
    float submerged_area = 0.0f;

    for (int i = 0; i < N_TRIANGLES; i++) {
        SubmergedTriangle t = SubmergedTrianglesBuffer[i];
        float area = t.center_and_area.w;

        // Ignore non-positive areas
        if (area > 0.0) {
            submerged_area += area;
        }
    }

    float r_s = submerged_area / tot_area;

    return r_s;
}

[numthreads(1, 1, 1)]
void MainCompute(uint3 id : SV_DispatchThreadID) {

    Rigidbody rigidbody = get_rigidbody();

    // Store prev results (used by eWave)
    BoatTexture[uint2(0,1)].rgb = rigidbody.position;
    BoatTexture[uint2(1,1)]     = rigidbody.orientation;
    BoatTexture[uint2(2,1)].rgb = rigidbody.linear_velocity;
    BoatTexture[uint2(3,1)].rgb = rigidbody.angular_velocity;

    float prev_r_s = BoatTexture[uint2(3,0)].a;
    BoatTexture[uint2(3,1)].a   = prev_r_s;

    float r_s = compute_ratio_of_submerge();

    apply_gravity(rigidbody);
    apply_buoyancy(rigidbody);
    apply_user_input(rigidbody, r_s);

    #ifdef ENABLE_COLLISIONS
        apply_collisions(rigidbody);
    #endif

    apply_resistance_forces(rigidbody, r_s, prev_r_s);

    update_rigidbody(rigidbody);

    // Store new results
    BoatTexture[uint2(0,0)].rgb = rigidbody.position;
    BoatTexture[uint2(1,0)]     = rigidbody.orientation;
    BoatTexture[uint2(2,0)].rgb = rigidbody.linear_velocity;
    BoatTexture[uint2(3,0)].rgb = rigidbody.angular_velocity;
    BoatTexture[uint2(3,0)].a   = r_s;

    store_f32(ReadbackTexture, uint2(0,0), rigidbody.position.x);
    store_f32(ReadbackTexture, uint2(1,0), rigidbody.position.y);
    store_f32(ReadbackTexture, uint2(2,0), rigidbody.position.z);
    store_f32(ReadbackTexture, uint2(3,0), rigidbody.orientation.x);
    store_f32(ReadbackTexture, uint2(4,0), rigidbody.orientation.y);
    store_f32(ReadbackTexture, uint2(5,0), rigidbody.orientation.z);
    store_f32(ReadbackTexture, uint2(6,0), rigidbody.orientation.w);

    // store_f32(ReadbackTexture, uint2(7,0), r_s - prev_r_s); // Debug

}