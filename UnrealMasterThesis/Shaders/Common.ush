#pragma once

static const float PI = 3.1415926535897933;
static const float M_TO_CM = 100.0;
static const float GRAVITY = 9.82;
static const float DENSITY_OF_WATER = 1000.0;
static const float HORSEPOWER_TO_NEWTON = 750.0;

/* Complex number stuff */

struct Complex {
  float re;
  float im;
};

Complex newComplex(float re, float im) {
  Complex c;
  c.re = re;
  c.im = im;
  return c;
}

Complex mul(Complex c1, Complex c2) {
  Complex c;
  c.re = c1.re * c2.re - c1.im * c2.im;
  c.im = c1.re * c2.im + c1.im * c2.re;
  return c;
}

Complex add(Complex c1, Complex c2) {
  Complex c;
  c.re = c1.re + c2.re;
  c.im = c1.im + c2.im;
  return c;
}

Complex conj(Complex c) {
  c.im = -c.im;
  return c;
}

/* Quaternion stuff */

float4 qmul(float4 q1, float4 q2) {
    return float4(
        q2.xyz * q1.w + q1.xyz * q2.w + cross(q1.xyz, q2.xyz),
        q1.w * q2.w - dot(q1.xyz, q2.xyz)
    );
}

float3 rotate_vector_by_quat(float3 v, float4 q) {
    float4 q_conj = q * float4(-1, -1, -1, 1);
    return qmul(q, qmul(float4(v, 0), q_conj)).xyz;
}

// http://www.songho.ca/opengl/gl_quaternion.html
float4x4 quat_to_mat(float4 q) {

    float x = q.x;
    float y = q.y;
    float z = q.z;
    float w = q.w;

    float x2 = x*x;
    float y2 = y*y;
    float z2 = z*z;

    float4x4 rotation_matrix = {
        1.0 - 2.0*y2 - 2.0*z2, 2.0*x*y - 2.0*w*z    , 2.0*x*z + 2.0*w*y    , 0.0,
        2.0*x*y + 2.0*w*z    , 1.0 - 2.0*x2 - 2.0*z2, 2.0*y*z - 2.0*w*x    , 0.0,
        2.0*x*z - 2.0*w*y    , 2.0*y*z + 2.0*w*x    , 1.0 - 2.0*x2 - 2.0*y2, 0.0,
        0.0                  , 0.0                  , 0.0                  , 1.0,
    };

    return rotation_matrix;
}

/* Rigidbody stuff */

struct Rigidbody {
    float3 force;
    float3 linear_velocity;
    float3 position;

    float3 torque;
    float3 angular_velocity;
    float4 orientation;

    float mass;
    float moment_of_inertia;
};

void add_force_at_position(inout Rigidbody rigidbody, float3 f, float3 pos) {
    pos -= rigidbody.position;

    rigidbody.force += f;

    if (length(pos) > 0.0001) {
        rigidbody.torque += cross(pos, f);
    }
}

void update_rigidbody(inout Rigidbody rigidbody) {

    const float dt = 0.02;

    float3 linear_acceleration = rigidbody.force / rigidbody.mass;
    rigidbody.linear_velocity += linear_acceleration * dt;
    rigidbody.position        += rigidbody.linear_velocity * dt;

    float3 angular_acceleration = rigidbody.torque / rigidbody.moment_of_inertia;
    rigidbody.angular_velocity += angular_acceleration * dt;

    // Angular velocity orientation
    float3 v = 0.5 * rigidbody.angular_velocity * dt;
    float4 avo = float4(v, 0.0);

    rigidbody.orientation = normalize(rigidbody.orientation + qmul(avo, rigidbody.orientation));
}

/* Ocean stuff */

struct SubmergedTriangle {
	float4 normal_and_height;
	float4 center_and_area;
};

float sample_elevation(Texture2D<float4> elevation_texture, float2 ws_coord) {

    const float L = 100.0;
    const float world_size = M_TO_CM * L;

    // The coordinate of interest in normalized UV space.
    float2 coord = (world_size * 0.5 + ws_coord) / world_size;

    SamplerState Sampler {
        Filter = MIN_MAG_MIP_LINEAR;
        AddressU = Wrap;
        AddressV = Wrap;
    };
    float elevation = elevation_texture.SampleLevel(Sampler, coord, 0).r; //
    // float elevation = elevation_texture.SampleLevel(Sampler, float2(0.0, 0.0), 0).r;

    return elevation;
    // return 0.0; // work, but no precision concers for 0
    // return 1.3693; // precision problem, becomes 136.875000 on CPU
    // return min16float(1.3693); // still precision problem..?

    // return f16tof32(asuint(asfloat(f32tof16(1.0))));
    // return f16tof32(asuint(asfloat(f32tof16(M_TO_CM * -10.369321)))); // https://forum.unity.com/threads/storing-two-16-bits-halfs-in-one-32-bits-float.987531/#:~:text=You%20can%20totally%20do%20that.%20The%20hard%20part%20is%20the%20conversion%20between%2032%20bit%20and%2016%20bit%20float%20still
    // return f16tof32(asuint(asfloat(f32tof16(M_TO_CM * 1.369321)))); // https://forum.unity.com/threads/storing-two-16-bits-halfs-in-one-32-bits-float.987531/#:~:text=You%20can%20totally%20do%20that.%20The%20hard%20part%20is%20the%20conversion%20between%2032%20bit%20and%2016%20bit%20float%20still
    // return f16tof32(asuint(asfloat(f32tof16(M_TO_CM * -101.120003)))); // https://forum.unity.com/threads/storing-two-16-bits-halfs-in-one-32-bits-float.987531/#:~:text=You%20can%20totally%20do%20that.%20The%20hard%20part%20is%20the%20conversion%20between%2032%20bit%20and%2016%20bit%20float%20still
    // return f16tof32(asuint(asfloat(f32tof16(100.0 * M_TO_CM * elevation)))); // https://forum.unity.com/threads/storing-two-16-bits-halfs-in-one-32-bits-float.987531/#:~:text=You%20can%20totally%20do%20that.%20The%20hard%20part%20is%20the%20conversion%20between%2032%20bit%20and%2016%20bit%20float%20still

    // return sign(elevation) * f16tof32(asuint(asfloat(f32tof16(M_TO_CM * abs(elevation))))); // https://forum.unity.com/threads/storing-two-16-bits-halfs-in-one-32-bits-float.987531/#:~:text=You%20can%20totally%20do%20that.%20The%20hard%20part%20is%20the%20conversion%20between%2032%20bit%20and%2016%20bit%20float%20still
}