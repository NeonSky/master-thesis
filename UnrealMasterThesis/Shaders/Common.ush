#pragma once

#define BOAT_COUNT 2
#define BOAT_COUNT_ACTIVE 1

static const float PI = 3.1415926535897933;
static const float M_TO_CM = 100.0;
static const float GRAVITY = 9.82;
static const float DENSITY_OF_WATER = 1000.0;
static const float HORSEPOWER_TO_NEWTON = 750.0;
static const float L = 100.0;
static const float N = 256.0;
static const float DELTA_T = 0.02;

/* Complex number stuff */

struct Complex {
  float re;
  float im;
};

Complex newComplex(float re, float im) {
  Complex c;
  c.re = re;
  c.im = im;
  return c;
}

Complex mul(Complex c1, Complex c2) {
  Complex c;
  c.re = c1.re * c2.re - c1.im * c2.im;
  c.im = c1.re * c2.im + c1.im * c2.re;
  return c;
}

Complex add(Complex c1, Complex c2) {
  Complex c;
  c.re = c1.re + c2.re;
  c.im = c1.im + c2.im;
  return c;
}

Complex sub(Complex c1, Complex c2) {
  Complex c;
  c.re = c1.re - c2.re;
  c.im = c1.im - c2.im;
  return c;
}

Complex conj(Complex c) {
  c.im = -c.im;
  return c;
}

/* Quaternion stuff */

float4 qmul(float4 q1, float4 q2) {
    return float4(
        q2.xyz * q1.w + q1.xyz * q2.w + cross(q1.xyz, q2.xyz),
        q1.w * q2.w - dot(q1.xyz, q2.xyz)
    );
}

float3 rotate_vector_by_quat(float3 v, float4 q) {
    float4 q_conj = q * float4(-1, -1, -1, 1);
    return qmul(q, qmul(float4(v, 0), q_conj)).xyz;
}

// http://www.songho.ca/opengl/gl_quaternion.html
float4x4 quat_to_mat(float4 q) {

    float x = q.x;
    float y = q.y;
    float z = q.z;
    float w = q.w;

    float x2 = x*x;
    float y2 = y*y;
    float z2 = z*z;

    float4x4 rotation_matrix = {
        1.0 - 2.0*y2 - 2.0*z2, 2.0*x*y - 2.0*w*z    , 2.0*x*z + 2.0*w*y    , 0.0,
        2.0*x*y + 2.0*w*z    , 1.0 - 2.0*x2 - 2.0*z2, 2.0*y*z - 2.0*w*x    , 0.0,
        2.0*x*z - 2.0*w*y    , 2.0*y*z + 2.0*w*x    , 1.0 - 2.0*x2 - 2.0*y2, 0.0,
        0.0                  , 0.0                  , 0.0                  , 1.0,
    };

    return rotation_matrix;
}

/* Rigidbody stuff */

struct Rigidbody {
    float3 force;
    float3 linear_velocity;
    float3 position;

    float3 torque;
    float3 angular_velocity;
    float4 orientation;

    float mass;
    float moment_of_inertia;
};

void add_force_at_position(inout Rigidbody rigidbody, float3 f, float3 pos) {
    pos -= rigidbody.position;

    rigidbody.force += f;

    if (length(pos) > 0.000001) {
        rigidbody.torque += cross(pos, f);
    }
}

void update_rigidbody(inout Rigidbody rigidbody) {

    const float dt = 0.02;

    float3 linear_acceleration = rigidbody.force / rigidbody.mass;
    rigidbody.linear_velocity += linear_acceleration * dt;
    rigidbody.position        += rigidbody.linear_velocity * dt;

    float3 angular_acceleration = rigidbody.torque / rigidbody.moment_of_inertia;
    rigidbody.angular_velocity += angular_acceleration * dt;

    // Angular velocity orientation
    float3 v = 0.5 * rigidbody.angular_velocity * dt;
    float4 avo = float4(v, 0.0);

    rigidbody.orientation = normalize(rigidbody.orientation + qmul(avo, rigidbody.orientation));
}

/* Ocean stuff */

struct SubmergedTriangle {
	float4 normal_and_height;
	float4 center_and_area;
	float4 v1;
	float4 v2;
	float4 v3;
};

float sample_ambient_elevation(Texture2D<float4> elevation_texture, float2 ws_coord) {

    const float world_size = M_TO_CM * L;

    // The coordinate of interest in normalized UV space.
    float2 coord = (world_size * 0.5 + M_TO_CM * ws_coord) / world_size;

    SamplerState Sampler {
        Filter = MIN_MAG_MIP_LINEAR;
        AddressU = Wrap;
        AddressV = Wrap;
    };

    float elevation = elevation_texture.SampleLevel(Sampler, coord, 0).r;

    return elevation;
}

float sample_wake_elevation(Texture2D<float4> eWave_H, float2 ws_coord, float2 ws_boat_coord) {

    const float cm_per_pixel = L * M_TO_CM / N;

    int2 pixel_pos     = (ws_boat_coord * M_TO_CM) / cm_per_pixel;
    float2 ws_boat_pos = pixel_pos * cm_per_pixel / M_TO_CM;
    ws_coord = M_TO_CM * (ws_coord - ws_boat_coord);

    ////////////////////////////
    float x = ws_coord.x;
    float y = ws_coord.y;
    float eWave_x = ws_boat_pos.x;
    float eWave_y = ws_boat_pos.y;
    ////////////////////////////

    const float world_size = M_TO_CM * L;
    const float half_world_size = world_size / 2.0;
    
    int signX = x > 0 ? 1 : -1;
    int signY = y > 0 ? 1 : -1;

    // Ocean tile indices:
    int oceanTile_x = (int)((x + signX * half_world_size) / world_size);
    int oceanTile_y = (int)((y + signY * half_world_size) / world_size);

    // eWave texture borders in world space coordinates
    float eWave_left  = eWave_x - half_world_size;
    float eWave_right = eWave_left + world_size;
    float eWave_up    = eWave_y - half_world_size;
    float eWave_down  = eWave_up + world_size;

    // Indices of ocean tiles partly covered by the eWave texture
    int eWave_tile_left  = (int)((eWave_left + signX * half_world_size) / world_size);
    int eWave_tile_right = (int)((eWave_right + signX * half_world_size) / world_size);
    int eWave_tile_up    = (int)((eWave_up + signY * half_world_size) / world_size);
    int eWave_tile_down  = (int)((eWave_down + signY * half_world_size) / world_size);

    // Worldcoordinate borders of the ocean tile for this (x, y) coordinate
    float oceanTile_left  = oceanTile_x * world_size - half_world_size;
    float oceanTile_right = oceanTile_left + world_size;
    float oceanTile_up    = oceanTile_y * world_size - half_world_size;
    float oceanTile_down  = oceanTile_up + world_size;

    float u_remapped = -1.0;
    float v_remapped = -1.0;

    if(x > eWave_right || x < eWave_left || y < eWave_up || y > eWave_down)
        // We are not interested if (x, y) coordinates that are outside of the eWave texture.
        return 0.0;

    if (oceanTile_x == eWave_tile_left){
        // This (x, y) coordinate is on the leftmost ocean tile covered by the eWave texture.
        float u_max = (oceanTile_right - eWave_left) / world_size;
        //u_remapped = remap(x, eWave_left, oceanTile_right, 0.0, u_max);
        u_remapped = (x - eWave_left) * (u_max - 0.0) / (oceanTile_right - eWave_left) + 0.0;
    }
    else{
        float u_min = 1.0 - ((eWave_right - oceanTile_left) / world_size);
        //u_remapped = remap(x, oceanTile_left, eWave_right, u_min, 1.0);
        u_remapped = (x - oceanTile_left) * (1.0 - u_min) / (eWave_right - oceanTile_left) + u_min;
    }


    if (oceanTile_y == eWave_tile_up){
        // This (x, y) coordinate is on the upper ocean tile covered by the eWave texture.
        float v_max = (oceanTile_down - eWave_up) / world_size;
        //v_remapped = remap(y, eWave_up, oceanTile_down, 0.0, v_max);
        v_remapped = (y - eWave_up) * (v_max - 0.0) / (oceanTile_down - eWave_up) + 0.0;
    }
    else{
        float v_min = 1.0 - ((eWave_down - oceanTile_up) / world_size);
        //v_remapped = remap(y, oceanTile_up, eWave_down, v_min, 1.0);
        v_remapped = (y - oceanTile_up) * (1.0 - v_min) / (eWave_down - oceanTile_up) + v_min;
    }

    float2 coord = float2(u_remapped, v_remapped);

    SamplerState Sampler {
        Filter = MIN_MAG_MIP_LINEAR;
        AddressU = Clamp;
        AddressV = Clamp;
    };

    float elevation = 5.0 * eWave_H.SampleLevel(Sampler, coord, 0).r;

    return elevation;
}

float sample_elevation(
    Texture2D<float4> elevation_texture,
    Texture2D<float4> wake_textures[BOAT_COUNT],
    float2 ws_coord,
    float2 ws_boat_coords[BOAT_COUNT]) {

    float elevation = sample_ambient_elevation(elevation_texture, ws_coord);

    for (int i = 0; i < BOAT_COUNT_ACTIVE; i++) {
        elevation += sample_wake_elevation(wake_textures[i], ws_coord, ws_boat_coords[i]);
    }

    return elevation;
}

/* Memory stuff */
void store_f32(RWTexture2D<float4> f16_texture, uint2 uv, float val) {

    uint p1  = asuint(val) & 0x000000FF;
    uint p2 = (asuint(val) & 0x0000FF00) >> 8;
    uint p3 = (asuint(val) & 0x00FF0000) >> 16;
    uint p4 = (asuint(val) & 0xFF000000) >> 24;

    f16_texture[uv] = float4(p1, p2, p3, p4);
}