#include "/Engine/Public/Platform.ush"

StructuredBuffer<float4> submergedTriangleVertices;
int numTriangles;
int L;

RWTexture2D<float4> obstructionMap_rtt;
RWTexture2D<float4> h_rtt;
float xPos;
float yPos;

float T(float x_y){
	float L = 256; // TODO: make these in parameters to the shader
	float taper_size = 5.0;
	if(x_y / taper_size < 1.0){
		return x_y / taper_size;
	}
	else if(abs(x_y - L) / taper_size < 1.0){
		return abs(x_y - L) / taper_size < 1.0;
	}
	else{
		return 1.0;
	}
}

float remap(float x, float in_min, float in_max, float out_min, float out_max){
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

bool ptInTriangle(float4 p, float4 p0, float4 p1, float4 p2){
    float A = 1.0 / 2.0 * (-p1[1] * p2[0] + p0[1] * (-p1[0] + p2[0]) + p0[0] * (p1[1] - p2[1]) + p1[0] * p2[1]);
    float tsign = (A < 0.0) ? -1.0 : 1.0;
    float s = (p0[1] * p2[0] - p0[0] * p2[1] + (p2[1] - p0[1]) * p[0] + (p0[0] - p2[0]) * p[1]) * tsign;
    float t = (p0[0] * p1[1] - p0[1] * p1[0] + (p0[1] - p1[1]) * p[0] + (p1[0] - p0[0]) * p[1]) * tsign;

    return s > 0.0 && t > 0.0 && (s + t) < 2.0 * A * tsign;
}

[numthreads(N_THREADS_X, N_THREADS_Y, 1)]
void eWaveCompute(uint3 id : SV_DispatchThreadID) {
	int N = 256;
	float2 IDxy = float2(id.xy) - float(N);// / 2.0;
	float xx = xPos - N / 2.0;
	float yy = yPos - N / 2.0;



	obstructionMap_rtt[id.xy] = float4(1.0, 0.0, 0.0, 1.0);
	for(int i = 0; i < (numTriangles * 3); i+=3){
		float4 v0 = submergedTriangleVertices[i + 0];
		//v0.x = remap(v0.x, -L, L, 0, N);
		//v0.y = remap(v0.y, -L, L, 0, N);
		v0.x = v0.x + 50;
		v0.y = v0.y + 50;
		float4 v1 = submergedTriangleVertices[i + 1];
		//v1.x = remap(v1.x, -L, L, 0, N);
		//v1.y = remap(v1.y, -L, L, 0, N); 
		v1.x = v1.x + 50;
		v1.y = v1.y + 50;
		float4 v2 = submergedTriangleVertices[i + 2];
		//v2.x = remap(v2.x, -L, L, 0, N);
		//v2.y = remap(v2.y, -L, L, 0, N); // we can ignore z
		v2.x = v2.x + 50;
		v2.y = v2.y + 50;
		
		if(ptInTriangle(float4(id.x, id.y, 0.0, 1.0), v0, v1, v2)){
			obstructionMap_rtt[id.xy] = float4(0.0, 0.0, 0.0, 1.0);
		}
			
	}

	//obstructionMap_rtt[id.xy] = float4(submergedTriangleVertices[0][0], submergedTriangleVertices[0][1], submergedTriangleVertices[1][0], submergedTriangleVertices[1][1]);
	//obstructionMap_rtt[id.xy] = float4(id.x, id.y, submergedTriangleVertices[2][0], submergedTriangleVertices[2][1]);





	
	float obs = 1;
	float r = 8;
	if (((IDxy.x - xx)*(IDxy.x - xx) + (IDxy.y -yy)*(IDxy.y - yy)) < r * r){
		obs = 0;
	}
	
	//obstructionMap_rtt[id.xy] = float4(obs, 0.0, 0.0, 1.0);
	float h = h_rtt[id.xy].r;
	float hIm = h_rtt[id.xy].g; // TODO: this should not be here...
	h *= obstructionMap_rtt[id.xy].r;
	float scale = 0.15;
	float obsCompliment = 1.0 - obstructionMap_rtt[id.xy];
	h += scale * obsCompliment;
	

	// Boundry conditions

	float T_x = T(id.x);
	float T_y = T(id.y);

	h = h * T_x * T_y;

	h_rtt[id.xy] = float4(h, hIm, 0.0, 1.0);
}