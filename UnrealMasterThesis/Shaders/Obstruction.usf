#include "/Engine/Public/Platform.ush"

#include "Common.ush"

Texture2D<float4> BoatTexture;
StructuredBuffer<SubmergedTriangle> SubmergedTrianglesBuffer;

RWTexture2D<float4> obstructionMap_rtt;
RWTexture2D<float4> hv_rtt;
RWTexture2D<float4> hv_prev_rtt;
int preFFT; 


float T(float x_y){
	float taper_size = 8.0;
	if(x_y / taper_size < 1.0){
		return x_y / taper_size;
	}
	else if(abs(x_y - N) / taper_size < 1.0){
		return abs(x_y - N) / taper_size;
	}
	else{
		return 1.0;
	}
}

// TODO: make more entry points instead of using the preFFT variable
[numthreads(N_THREADS_X, N_THREADS_Y, 1)]
void eWaveCompute(uint3 id : SV_DispatchThreadID) {

	if (preFFT == 2) {
		const float cm_per_pixel = L * M_TO_CM / N;

		float2 pos = BoatTexture[uint2(0,0)].rg; // RG of (0,0) stores horizontal position (see gravity in GPUBoat.usf)
		// hv_rtt[uint2(0,0)].ba = pos; // correct normals, flickering positions

		int xp = (pos.x * M_TO_CM) / cm_per_pixel;
		int yp = (pos.y * M_TO_CM) / cm_per_pixel;

		float2 prev_pos = BoatTexture[uint2(0,1)].rg; // RG of (0,1) stores previous horizontal position

		int prev_xp = (prev_pos.x * M_TO_CM) / cm_per_pixel;
		int prev_yp = (prev_pos.y * M_TO_CM) / cm_per_pixel;

		int boat_dx = xp - prev_xp;
		int boat_dy = yp - prev_yp;

		pos.x = xp * cm_per_pixel / M_TO_CM;
		pos.y = yp * cm_per_pixel / M_TO_CM;

		hv_rtt[uint2(0,0)].ba = pos; // correct positions, flickering normals (now works!? At least with shader3.txt)
		hv_prev_rtt[uint2(0,0)].ba = float2(boat_dx, boat_dy);

		return;
	}

	// ----------------------------------------------------------------------------------
	// Pre processing steps:
	// 		sample the previous frames height and velocity potential fields from copies.
	// 		compute the obstruction map from the submerged triangles.
	// ----------------------------------------------------------------------------------

	int2 sampleCoordinates = int2(id.x, id.y);
	if (preFFT >= 1) {
		sampleCoordinates = id.xy + int2(hv_prev_rtt[uint2(0,0)].ba);
	}

	float2 hv = hv_prev_rtt[sampleCoordinates.xy].rg;
	float h = hv.x;
	float v = hv.y;

	// ----------------------------------------------------------------------------------
	// Step 1, Apply obstruction:
	// ----------------------------------------------------------------------------------
	h *= obstructionMap_rtt[id.xy].r;
	
	// ----------------------------------------------------------------------------------
	// Step 2, Apply ambient waves: (TODO: the entire step)
	//		Note: this should only be done before FFT
	// ----------------------------------------------------------------------------------
	//if(preFFT == 1){
	//	
		
	//}
	
	// ----------------------------------------------------------------------------------
	// Step 3, Apply trim (boundary conditions)
	// ----------------------------------------------------------------------------------
	float T_x = T(id.x);
	float T_y = T(id.y);
	h = h * T_x * T_y;
	v = v * T_x * T_y;
	
	
	// ----------------------------------------------------------------------------------
	// Step 4, Add sources
	//		Note: this should only be done before FFT
	// ----------------------------------------------------------------------------------
	if (preFFT == 1) {

		float3 vel = BoatTexture[uint2(2,0)].rgb; // RGB of (2,0) stores velocity
		float speedScale = pow(length(vel), 1.5) / 500.0;

		float scale = 5.0 * speedScale; // Needs to match material
		float obsCompliment = 1.0 - obstructionMap_rtt[id.xy].r;
		h += scale * obsCompliment;
	}
	
	
	// ----------------------------------------------------------------------------------
	// Write results.
	// ----------------------------------------------------------------------------------
	// As a last step, make sure that when the simulation moved it leaves 0s behind.
	if(    (sampleCoordinates.x >= 0 && sampleCoordinates.x <= 255) 
		&& (sampleCoordinates.y >= 0 && sampleCoordinates.y <= 255)){
		h = h;
		v = v;	
	} else {
		h = 0.0;
		v = 0.0;
	}

	hv_rtt[id.xy].rg = float2(h, v);
}