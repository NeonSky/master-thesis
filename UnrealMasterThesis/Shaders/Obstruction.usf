#include "/Engine/Public/Platform.ush"

StructuredBuffer<float4> submergedTriangleVertices;
int numTriangles;
int L;

RWTexture2D<float4> obstructionMap_rtt;
RWTexture2D<float4> h_rtt;
RWTexture2D<float4> v_rtt;
RWTexture2D<float4> hPrev_rtt;
RWTexture2D<float4> vPrev_rtt;
float xPos;
float yPos;
int offset_x;
int offset_y;


float T(float x_y){
	float L_in_pixels = 256.0; // TODO: make these in parameters to the shader
	float taper_size = 32.0;
	if(x_y / taper_size < 1.0){
		return x_y / taper_size;
	}
	else if(abs(x_y - L_in_pixels) / taper_size < 1.0){
		return abs(x_y - L_in_pixels) / taper_size;
	}
	else{
		return 1.0;
	}
}

float remap(float x, float in_min, float in_max, float out_min, float out_max){
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

bool ptInTriangle(float4 p, float4 p0, float4 p1, float4 p2){
    float A = 1.0 / 2.0 * (-p1[1] * p2[0] + p0[1] * (-p1[0] + p2[0]) + p0[0] * (p1[1] - p2[1]) + p1[0] * p2[1]);
    float tsign = (A < 0.0) ? -1.0 : 1.0;
    float s = (p0[1] * p2[0] - p0[0] * p2[1] + (p2[1] - p0[1]) * p[0] + (p0[0] - p2[0]) * p[1]) * tsign;
    float t = (p0[0] * p1[1] - p0[1] * p1[0] + (p0[1] - p1[1]) * p[0] + (p1[0] - p0[0]) * p[1]) * tsign;

    return s > 0.0 && t > 0.0 && (s + t) < 2.0 * A * tsign;
}

[numthreads(N_THREADS_X, N_THREADS_Y, 1)]
void eWaveCompute(uint3 id : SV_DispatchThreadID) {
	float h = hPrev_rtt[id.xy].r;
	float v = vPrev_rtt[id.xy].r;


	// Apply boundary conditions
	float T_x = T(id.x);
	float T_y = T(id.y);
	h = h * T_x * T_y;
	v = v * T_x * T_y;
	
	
	h_rtt[id.xy] = float4(h, 0.0, 0.0, 1.0);
	v_rtt[id.xy] = float4(v, 0.0, xPos, yPos);
}