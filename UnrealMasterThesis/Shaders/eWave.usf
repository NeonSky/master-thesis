#include "/Engine/Public/Platform.ush"
#include "Common.ush"

float dt; // Delta time (in seconds)

RWTexture2D<float4> eWave_hv;

[numthreads(N_THREADS_X, N_THREADS_Y, 1)]
void eWaveCompute(uint3 id : SV_DispatchThreadID) {

	// Based on chapter 2.4 of "handbook of real-time Fast Fourier Transforms" (1995) by the Smiths
	// TODO: get rid of ternary operators if possible.
	uint x2 = id.x > 0 ? N - id.x : 0;
	uint y2 = id.y > 0 ? N - id.y : 0;

	float2 C  = eWave_hv[id.xy].rg;
	float2 C2 = eWave_hv[uint2(x2, y2)].rg;

	Complex RPk = newComplex(0.5 * (C.r + C2.r), 0.0);
	Complex IMk = newComplex(0.5 * (C.g - C2.g), 0.0);
	Complex hPrev = add(
		RPk,
		mul(
			newComplex(0.0, 1.0),
			IMk
		)
	);

	Complex IPk = newComplex(0.5 * (C.g + C2.g), 0.0);
	Complex RMk = newComplex(0.5 * (C.r - C2.r), 0.0);
	Complex vPrev = sub(
		IPk,
		mul(
			newComplex(0.0, 1.0),
			RMk
		)
	);
	//////////////////////////

	float dkx = 2 * PI / L;
	float dky = dkx;

	float kx, ky;

	if (id.x <= N / 2.0){
		kx = id.x*dkx;
	}
	else{
		kx = (N - id.x)*dkx;
	}
	
	if (id.y <= N / 2.0){
		ky = id.y*dky;
	}
	else{
		ky = (N - id.y)*dky;
	}

	float m_k = sqrt(kx*kx + ky*ky);
	float w = sqrt(GRAVITY*m_k);

	float coswk = cos(w*dt);
	float sinwk = sin(w*dt);

	if (m_k != 0) {

		Complex h = newComplex(
			coswk*hPrev.re + (m_k / w)*sinwk*vPrev.re, // eq 19
			coswk*hPrev.im + (m_k / w)*sinwk*vPrev.im  // eq 19
		);

		Complex v = newComplex(
			coswk*vPrev.re - (GRAVITY / w)*sinwk*hPrev.re, // eq 20	
			coswk*vPrev.im - (GRAVITY / w)*sinwk*hPrev.im  // eq 20
		);

		Complex hv = add(
			h,
			mul(
				newComplex(0.0, 1.0),
				v
			)
		);
		
		eWave_hv[id.xy] = float4(hv.re, hv.im, 0.0, 1.0);
		// eWave_hv[id.xy] = float4(0.0123456, 0.0123456, 0.0, 1.0);
	}
	
}